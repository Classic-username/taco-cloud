3/28/24 morning
Added OrderController and orderForm files
added update log

Next time: 2.3 in book, page 76 PDF
3/28/24
Created formvalidation branch
added validation dependency
added form validation to various files

3/29/24
Created validationerrors branch
Ran a formatter in each HTML file
Implemented form validation in the orderController HTML page
Need to implement in design page, and there is an issue with the credit card and expiration validation. I cannot get past them.

3/30/24
Determined the issue for CCExpiration field was because there was space in the regex.
Issue with credit cards was they cannot be any random 16 digits. Went with one found online 4444333322221111.
Implemented validation in design page.
Created a webconfig folder and file, implemented WebMvcConfigurer and added the home route to this.
Removed home controller.

4/1/24
Updated domain objects to prepare for data persistence
renamed application.properties to application.yaml as the book says it will be using yaml format going forward
added h2database and starter jdbc dependencies
Created ingredient repository interface and jdbc class

4/3/24
Added save override to jdbcingredientrepository
Injected ingredient repo into designtacocontroller and cleaned up errors (had to reference code from book repo on github)
Refactored converter for DB calls

4/4/24
Added db schema
Added data to be created at runtime
application has errors, will need to debug

4/5/24
Fixed db issues
re added slf4j logger because sys out print was not showing what I expected

4/6/24 part 1
added orderrepository interface
added ingredientref in domains
Created JdbcorderRepository class
had to update a data type in Taco domain so jdbcOrderRepository would work
Injected OrderRepository into OrderController
Troubleshooting
Added readme with instructions for accessing h2 console
!!!!----THIS WILL BE THE LAST BRANCH MERGED TO THE MAIN REPO----!!!!
The book is starting to h e a v i l y diverge from being able to have a coherent project structure, and is refactoring things seemingly willy nilly.
Assuming I follow the book and continue merging, I will lose previous work examples, so for the sake of keeping the examples, I will be saving each thing to its own branch and not merging into main.

4/6/24 part 2
Changed to JDBC data dependency instead of JdbcTemplate
Updated orderRepository to use JDBC instead of JDBC Template
Updated ingredientRepository to use JDBC instead of JDBC Template
Removed unnecessary classes, these aren't needed with JDBC data
Annotated some domain objects with @table and @id
ingredient.java is fully prepped for data persistence

4/8/24
removed final from ingredient.java so the project could run
changed repo to crudrepo in ingredrepo for a method in CommandLineRunner
Initialized date in TacoOrder because it was previously initialized in a jdbc repo which was deleted
added commandlinerunner to APP file
deleted unused sql file

Important message to copy:
Check Readme for Accessing the H2 database

4/9/24
Added final back to ingredient object, and added lombok @with annotation.
Checked out new branch
Updated pom.xml with jpa dependency instead of jdbc
Updated ingredient domain object to use JPA instead of JDBC
Updated taco domain object for jpa instead of jdbc
Updated tacoorder domain object for jpa instead of jdbc
Removed comments from ingredientrepo interface

4/10/24
Created new branch
Updated pom file with dependency for cassandra
updated app.yml to point at cassandra
experiencing issues running the docker commands for cassandra. Stack overflow post:
https://stackoverflow.com/questions/78304781/spring-in-action-sixth-edition-page-96-docker-commands-errors

4/11/24
added username and password to cassandra config in yml
Updated ingredient domain object to use Cassandra
Updated taco class for cassandra 

4/12/24
Missed the UDT for ingredient
Added UDT folder
Added IngredientUDT for cassandra db

4/13/24
Updated TacoOrder to use cassandra
Created TacoUDT class to be referenced in TacoOrder
Added an import to taco.java for the ingredientUDT, still needs troubleshooting
Updated TacoOrder to use cassandra
Added TacoUDRUtils
Imported newly created TacoUDRUtils import to taco.java
Updated OrderRepository for cassandra
Refactored designtacocontroller to use tacoUDT, and aligned with the book
Added an appconfig.java for 

4/14/24
Made pom.xml match book code
Re added test dependency so project would run

4/16/24
All commits in the first push have been troubleshooting the cassandra connection, we will be coming back to this later.
commented un-needed config file
--------------------------------------------------------------
updated from Cassandra to MongoDB dependency
Mongo DB is running/runnable in Docker, we could use an in memory DB instead:
<dependency>
<groupId>de.flapdoodle.embed</groupId>
<artifactId>de.flapdoodle.embed.mongo</artifactId>
<!-- <scope>test</scope> -->
</dependency>
updated yml file to point at MongoDB
updated ingredient domain to use mongodb
Cleaned annotations from Taco for MongoDB
removed files that should have been removed during the cassandra branch
updated tacoorder domain to use mongodb
updated OrderRepo for Mongo
updated DesignController for Mongo
updated config files to .txt files
removed driver dependencies from troubleshooting
removed commandlinerunner from application.java
ERROR :D
MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "4.9.1"}, "os": {"type": "Windows", "name": "Windows 10", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/20.0.1+9-29"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=MongoCredential{mechanism=null, userName='tacocloud', source='sleepy_spence', password=<hidden>, mechanismProperties=<hidden>}, streamFactoryFactory=null, commandListeners=[io.micrometer.core.instrument.binder.mongodb.MongoMetricsCommandListener@18580b6c], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@4ce6cb46, com.mongodb.Jep395RecordCodecProvider@74ea5b7a]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='30000 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, sendBufferSize=0}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, sendBufferSize=0}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[io.micrometer.core.instrument.binder.mongodb.MongoMetricsConnectionPoolListener@2d1182fa], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, contextProvider=null}
2024-04-16T05:50:03.405-06:00  INFO 15492 --- [localhost:27017] org.mongodb.driver.cluster               : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=21, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=53033500}
2024-04-16T05:50:03.681-06:00  INFO 15492 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2024-04-16T05:50:04.925-06:00  INFO 15492 --- [  restartedMain] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 1 endpoint(s) beneath base path '/actuator'
2024-04-16T05:50:05.033-06:00  INFO 15492 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2024-04-16T05:50:05.053-06:00  INFO 15492 --- [  restartedMain] c.c.tacocloud.TacoCloudApplication       : Started TacoCloudApplication in 6.241 seconds (process running for 6.922)
2024-04-16T05:50:05.464-06:00  INFO 15492 --- [on(1)-127.0.0.1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-04-16T05:50:05.464-06:00  INFO 15492 --- [on(1)-127.0.0.1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-04-16T05:50:05.467-06:00  INFO 15492 --- [on(1)-127.0.0.1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2024-04-16T05:50:22.109-06:00 ERROR 15492 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing 
failed: org.springframework.data.mongodb.UncategorizedMongoDbException: Exception authenticating MongoCredential{mechanism=SCRAM-SHA-1, userName='tacocloud', source='sleepy_spence', password=<hidden>, mechanismProperties=<hidden>}] with root cause

com.mongodb.MongoCommandException: Command failed with error 18 (AuthenticationFailed): 'Authentication failed.' on server localhost:27017. The full response is {"ok": 0.0, "errmsg": "Authentication failed.", "code": 
18, "codeName": "AuthenticationFailed"}

4/20/24
added security dependency
added security folder and subfolders
added securityconfig.java
added Buzz and Woody as users in the in-memory list
Created user domain object for users
Added data jpa dependency so jakarta imports would work
Created userrepository
updated securityconfig to use actual users and not pre-written users
Created registrationcontroller to register users
created registration html page
Created registrationform

4/23/24
debugging, changing branches
Pulled datapersistencejpa repo for easier refactoring, checking out new spring security branch from this for easier refactoring
added security dependency
added securityconfig.java
added temp bean to securityconfig
added user domain class
added user repository
added RegistrationForm
added register template
updated registrationcontroller to point at registrationform
updated SecurityConfig with new spring security formatting

4/24/24
added login to securityconfig
added login route to webconfig
added login to thymeleaf templates
Removed whitespace
attempted fix with mvc.pattern, didn't work.

4/25/24
Fixed securityconfig error
Unsatisfied dependency expressed through field 'mvc': Error creating bean with name 'securityConfig': Requested bean is currently in creation: Is there an unresolvable circular reference?
preventing the app from running

4/30/24
added oauth2 to dependencies
updated app.yml for oauth 2
Updated app.yml and login template to use Github oauth
added oauth2 login to filterchain
Removed facebook from app.yml

5/1/24
Renamed user to users and updated all imports to reflect
deleted unused schema sql
Deleted google config copied from stack overflow
removed extra lines

5/2/24
Got the csrf disable working, it doesn't fix the 403 error. Found some lambda stuff with the oauth2Login, will be looking into that

5/7/24
attempted some login stuff in securityconfig, it isn't working yet

5/10/24
Created an OAuth2UserService file, it has several imported files we don't have created so we'll be moving on in the book.
Commented attempted logic to save oauth2 users
Updated registrationcontroller to use the right template
Added comment about github login being broken
Added h2 console enabled in app.yml

Next time:
troubleshooting 403 error after login
possibly 
https://docs.spring.io/spring-security/reference/migration-7/configuration.html
for configuring ldap server
Creating a custom login page 160 PDF


Troubleshooting connection issue:
Error connecting to Node(endPoint=/127.0.0.1:9042, hostId=null, hashCode=5c3503a4), trying next node (ConnectionInitException: [s0|control|connecting...] Protocol initialization request, step 1 (OPTIONS): failed to send request (io.netty.channel.StacklessClosedChannelException))
https://datastax-oss.atlassian.net/browse/JAVA-2936

Important message to copy:
Check Readme for Accessing the H2 database
Next time:
page 103 in book, 130 PDF
Mapping the TacoOrder class to a Cassandra orders table